cmake_minimum_required(VERSION 3.12)
set(KEYWORD iChat)

# set the venv name
set(NAME_VENV ${KEYWORD}_venv)
project($KEYWORD)

# Find Python and Virtualenv.
find_program(VIRTUALENV virtualenv)

if(NOT VIRTUALENV)
    message(FATAL_ERROR "Could not find `virtualenv` in PATH")
endif()

set(VIRTUALENV ${VIRTUALENV})

# Find Yarp and iCubCONTRIB packages
find_package(YARP  REQUIRED)
FIND_PACKAGE(ICUBcontrib REQUIRED)
list(APPEND CMAKE_MODULE_PATH ${ICUBCONTRIB_MODULE_PATH})

#icubcontrib_set_default_prefix()
set(ICUB_APPLICATIONS_PREFIX "$ENV{ICUB_ROOT}" CACHE PATH "Application path prefix")


# Generate the virtualenv and ensure it's up to date.
add_custom_command(
    OUTPUT ${NAME_VENV}
    COMMAND ${VIRTUALENV} --python=/usr/bin/python ${NAME_VENV}
)

add_custom_command(
    OUTPUT requirements
    DEPENDS ${NAME_VENV}
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python-scripts/requirements.txt requirements.txt
    COMMAND ./${NAME_VENV}/bin/pip install -r requirements.txt
)

# Generate the binary using pyinstaller and put the binary in the bin folder
add_custom_command(
    OUTPUT binary
    DEPENDS ${NAME_VENV} requirements
    COMMAND ./${NAME_VENV}/bin/pyinstaller  ${CMAKE_CURRENT_SOURCE_DIR}/python-scripts/${KEYWORD}.spec --distpath bin -F

)

# Custom targets for CMake
# Create a virtualenv and install all requirements
add_custom_target(build  ALL
    DEPENDS binary
    SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/python-scripts/requirements.txt
)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/bin/${KEYWORD} PERMISSIONS ${PROGRAM_PERMISSIONS_DEFAULT} DESTINATION bin)
